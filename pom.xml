<?xml version="1.0" encoding="UTF-8"?>

<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.sinodata</groupId>
  <artifactId>lottery</artifactId>
  <version>0.0.1</version>
  <name>${project.artifactId}</name>
  <packaging>pom</packaging>
  <organization>
    <name>sinodata</name>
    <url>https://www.sinodata.com</url>
  </organization>

  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <!-- Sonar -->
    <!-- The destination file for the code coverage report has to be set to the same value
         in the parent pom and in each module pom. Then JaCoCo will add up information in
         the same report, so that, it will give the cross-module code coverage. -->
    <sonar.jacoco.reportPaths>${PWD}/./target/jacoco.exec</sonar.jacoco.reportPaths>
    <sonar.groovy.binaries>target/classes</sonar.groovy.binaries>  
    <!-- 统一定义项目依赖库的版本 -->
    <!-- springboot相关 -->
    <spring-boot.version>2.2.4.RELEASE</spring-boot.version>
    <spring-cloud.version>Hoxton.SR2</spring-cloud.version>
    <spring-platform.version>Cairo-SR8</spring-platform.version>
    <spring-boot-admin.version>2.2.2</spring-boot-admin.version>
    <security.oauth.version>2.3.6.RELEASE</security.oauth.version>
    <!-- 数据库 -->
    <mybatis-plus.version>3.3.1</mybatis-plus.version>
    <mysql.connector.version>8.0.19</mysql.connector.version>
    <!-- sql 分析工具 开发测试阶段用于sql性能分析 -->
    <p6spy.version>3.8.5</p6spy.version>
    <!-- 验证码 -->
    <kaptcha.version>1.6.2</kaptcha.version>
    <!-- api文档自动生成 -->
    <swagger.fox.version>2.9.2</swagger.fox.version>
    <swagger.core.version>1.5.22</swagger.core.version>
    <knife4j.version>2.0.1</knife4j.version>
    <!-- lcn 分布式事务 -->
    <lcn.version>4.1.0</lcn.version>
    <jasypt.version>2.1.1</jasypt.version>
    
    <!-- 工作流程 -->
	<flowable.version>6.5.0</flowable.version>

    <!-- grpc-springboot -->
    <net-devh-grpc.version>2.7.0.RELEASE</net-devh-grpc.version>
    <!-- grpc -->
    <grpc.version>1.27.1</grpc.version>
    <protobuf.version>3.11.4</protobuf.version>
  </properties>

  <dependencies>
    <!--配置文件处理器-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <optional>true</optional>
    </dependency>
    <!-- springboot监控端点 -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <!--Lombok-->
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <scope>provided</scope>
    </dependency>
    <!--测试依赖-->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <modules>
    <module>lottery-proto</module>
    <module>lottery-service</module>
    <module>lottery-web</module>
  </modules>

  <!-- 统一管理依赖的版本 子项目引用依赖无须声明版本 -->
  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>io.spring.platform</groupId>
        <artifactId>platform-bom</artifactId>
        <version>${spring-platform.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-dependencies</artifactId>
        <version>${spring-cloud.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <!--稳定版本，替代spring security bom内置-->
      <dependency>
        <groupId>org.springframework.security.oauth</groupId>
        <artifactId>spring-security-oauth2</artifactId>
        <version>${security.oauth.version}</version>
      </dependency>
      <!--web 模块-->
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
        <version>${spring-boot.version}</version>
      </dependency>

      <!--监控客户端-->
      <dependency>
        <groupId>de.codecentric</groupId>
        <artifactId>spring-boot-admin-starter-client</artifactId>
        <version>${spring-boot-admin.version}</version>
      </dependency>
     
      <!-- 其他第三方组件依赖 -->
      <!--jasypt配置文件加解密， 主要是数据库密码 -->
      <dependency>
        <groupId>com.github.ulisesbocchio</groupId>
        <artifactId>jasypt-spring-boot-starter</artifactId>
        <version>${jasypt.version}</version>
      </dependency>
      <!--mybatis plus extension,包含了mybatis plus core-->
      <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus-extension</artifactId>
        <version>${mybatis-plus.version}</version>
      </dependency>
      <!--mybatis-plus 兼容mybatis 但功能增强-->
      <dependency>
        <groupId>com.baomidou</groupId>
        <artifactId>mybatis-plus-boot-starter</artifactId>
        <version>${mybatis-plus.version}</version>
      </dependency>
      <!--mysql 驱动-->
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${mysql.connector.version}</version>
      </dependency>
    <!-- sql 分析工具 开发测试阶段用于sql性能分析 -->
    <dependency>
      <groupId>p6spy</groupId>
    <artifactId>p6spy</artifactId>
    <version>${p6spy.version}</version>
      </dependency>
      <!--swagger 依赖 用swagger注解对外的api接口 用于自动生成接口文档-->
      <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-swagger2</artifactId>
        <version>${swagger.fox.version}</version>
      </dependency>
      <!--knife4j是为Java MVC框架集成Swagger生成Api文档的增强-->
      <dependency>
        <groupId>com.github.xiaoymin</groupId>
        <artifactId>knife4j-micro-spring-boot-starter</artifactId>
        <version>${knife4j.version}</version>
      </dependency>
      <!--swagger 最新依赖内置版本 替换 springfox-swagger2 内置的版本-->
      <dependency>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-models</artifactId>
        <version>${swagger.core.version}</version>
      </dependency>
      <dependency>
        <groupId>io.swagger</groupId>
        <artifactId>swagger-annotations</artifactId>
        <version>${swagger.core.version}</version>
      </dependency>
      <!--接口文档 展示接口的web页面-->
      <dependency>
        <groupId>io.springfox</groupId>
        <artifactId>springfox-swagger-ui</artifactId>
        <version>${swagger.fox.version}</version>
      </dependency>
      <dependency>
        <groupId>com.github.xiaoymin</groupId>
        <artifactId>knife4j-spring-ui</artifactId>
        <version>${knife4j.version}</version>
      </dependency>
      <!-- 分布式事务lcn 模块端控制依赖-->
      <dependency>
        <groupId>com.codingapi</groupId>
        <artifactId>tx-client</artifactId>
        <version>${lcn.version}</version>
      </dependency>
      <!-- lcn 对关系型数据库的插件支持-->
      <dependency>
        <groupId>com.codingapi</groupId>
        <artifactId>tx-plugins-db</artifactId>
        <version>${lcn.version}</version>
      </dependency>
      <!-- activiti 工作流 -->
      <dependency>
        <groupId>org.flowable</groupId>
        <artifactId>flowable-spring-boot-starter</artifactId>
        <version>${flowable.version}</version>
      </dependency>

      <!-- grpc-springboot -->
      <dependency>
        <groupId>net.devh</groupId>
        <artifactId>grpc-server-spring-boot-starter</artifactId>
        <version>${net-devh-grpc.version}</version>
      </dependency>
      <dependency>
        <groupId>net.devh</groupId>
        <artifactId>grpc-client-spring-boot-starter</artifactId>
        <version>${net-devh-grpc.version}</version>
      </dependency>
      <dependency>
      <groupId>com.sinodata</groupId>
        <artifactId>lottery-proto</artifactId>
        <version>0.0.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <build>
    <finalName>${project.name}</finalName>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>
    <pluginManagement>
     <plugin>
        <plugin>
          <groupId>org.jacoco</groupId>
             <artifactId>jacoco-maven-plugin</artifactId>
             <version>0.8.2</version>
             <configuration>
             <append>true</append>
             </configuration>
             <executions>
             <execution>
                 <id>agent-for-ut</id>
                 <goals>
                 <goal>prepare-agent</goal>
                 </goals>
             </execution>
             <execution>
                 <id>agent-for-it</id>
                 <goals>
                 <goal>prepare-agent-integration</goal>
                 </goals>
             </execution>
             <execution>
                 <id>jacoco-site</id>
                 <phase>verify</phase>
                 <goals>
                 <goal>report</goal>
                 </goals>
            </execution>
            </executions>
        </plugin>
      </plugin> 
      <plugins>
        <plugin>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-maven-plugin</artifactId>
          <version>${spring-boot.version}</version>
          <executions>
            <execution>
              <goals>
                <goal>repackage</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.0</version>
        <configuration>
          <target>${maven.compiler.target}</target>
          <source>${maven.compiler.source}</source>
          <encoding>UTF-8</encoding>
          <skip>false</skip>
        </configuration>
      </plugin>
    </plugins>
  </build>

  <pluginRepositories>
    <pluginRepository>
      <id>aliyun-plugin</id>
      <url>https://maven.aliyun.com/repository/public</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>false</enabled>
      </snapshots>
    </pluginRepository>
  </pluginRepositories>

  <repositories>
    <!--阿里云代理-->
    <repository>
      <id>aliyun</id>
      <name>aliyun</name>
      <url>http://maven.aliyun.com/nexus/content/groups/public</url>
    </repository>
  </repositories>

</project>
